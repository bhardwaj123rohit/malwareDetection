/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package malwaredetectionandroid;

import jadx.api.JadxDecompiler;
import jadx.core.utils.exceptions.JadxException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javaapplication10.JavaApplication10;
import javafx.application.Application;
import static javafx.application.Application.launch;
import static javafx.application.Application.launch;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Line;
import javafx.scene.text.Text;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import jd.core.JavaDecompiler;
import jd.core.input.JDInput;
import jd.core.input.ZipFileInput;
import jd.core.output.DirOutput;
import jd.core.output.JDOutput;

/**
 *
 * @author Nitish
 */
public class MalwareDetectionAndroid extends Application {

    String outputFilePath;
    File file;
    Pane root;
    Label status = new Label();
    Text result;
    private StringProperty statusText=new SimpleStringProperty(this, "statusText", "");
  
         ProgressBar pb = new ProgressBar(0);
         ProgressIndicator pi= new ProgressIndicator(0);
 
   

    @Override
    public void start(final Stage primaryStage) throws Exception {
        

        final ImageView logo = new ImageView();
        final Image image2 = new Image(MalwareDetectionAndroid.class.getResourceAsStream("/logo.jpg"), 600, 60, false, false);
        logo.setImage(image2);
        final HBox pictureRegion = new HBox();
        pictureRegion.getChildren().add(logo);
       
        final ImageView tag = new ImageView();
        tag.setTranslateX(0);
        tag.setTranslateY(61);
        final Image tagimage = new Image(MalwareDetectionAndroid.class.getResourceAsStream("/tag.jpg"), 600, 15, false, false);
        tag.setImage(tagimage);
        final HBox pictureRegionTag = new HBox();
        pictureRegionTag.getChildren().add(tag);

        Line line = new Line(0, 90, 600, 90);
        

        String steps = "This is a module performing reverse-engineering of an android application."
                + "\nStep 1 - Select the APK file."
                + "\nStep 2 - Select the folder in which the Java Code will be saved."
                + "\nStep 3 - Click Decompile.";
        Text text = new Text(10, 105, steps);
        String res="Start Malware Detection!";
         result = new Text(400, 250, res);
        Button btn = new Button();
        btn.setText("Select File");
        btn.setLayoutX(20);
        btn.setLayoutY(200);
        
        Button btnClas = new Button();
        btnClas.setText("Classify");
        btnClas.setLayoutX(400);
        btnClas.setLayoutY(200);

        Button btnOpenDirectoryChooser = new Button();
        btnOpenDirectoryChooser.setText("Choose Output Location");
        btnOpenDirectoryChooser.setLayoutX(20);
        btnOpenDirectoryChooser.setLayoutY(250);

        Button btnSubmit = new Button();
        btnSubmit.setText("Decompile");
        btnSubmit.setLayoutX(20);
        btnSubmit.setLayoutY(300);
        
        Button btnCall = new Button();
        btnCall.setText("Create Call Graph");
        btnCall.setLayoutX(400);
        btnCall.setLayoutY(300);

        status.setTranslateX(400);
        status.setTranslateY(400);
        status.setText("");
        status.textProperty().bind(statusText);
        
        
        final ProgressBar pb = new ProgressBar(0);
        final ProgressIndicator pi = new ProgressIndicator(0);
        final HBox hb = new HBox();
        hb.setSpacing(5);
        hb.setAlignment(Pos.BOTTOM_RIGHT);
        hb.getChildren().addAll(pb, pi);
        hb.setLayoutX(20);
        hb.setLayoutY(350);
        hb.setAlignment(Pos.BOTTOM_RIGHT);
        root = new Pane();

        root.getChildren().add(pictureRegion);
        root.getChildren().add(pictureRegionTag);
        root.getChildren().add(line);
        root.getChildren().add(result);
        root.getChildren().add(text);
        root.getChildren().add(btn);
        root.getChildren().add(btnCall);
        root.getChildren().add(btnClas);
        root.getChildren().add(btnOpenDirectoryChooser);
        root.getChildren().add(btnSubmit);
        root.getChildren().add(status);
        root.getChildren().add(hb);
       
       root.managedProperty().bind(root.visibleProperty());
       

        Scene scene = new Scene(root, 600, 400);

        primaryStage.setTitle("Malware Detection in Android Systems");
        primaryStage.setScene(scene);
        primaryStage.show();
        
        
          btnClas.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                if(file!=null){
                
                try {
                    
                    classifier cl=new classifier();
                    int classify;
                    classify = cl.classify(file.getAbsolutePath());
                    if (classify==1)
                    {
                        System.out.println("MALWARE DETECTED");
                        result.setText("MALWARE DETECTED!");
                    }
                    else
                    {
                        result.setText("NO MALWARE DETECTED!");
                    }
                    
                    
                    
                    
                } catch (IOException ex) {
                    Logger.getLogger(MalwareDetectionAndroid.class.getName()).log(Level.SEVERE, null, ex);
                }
                              
                }
                else{
                    statusText.set("File not selected");
                }
                
            }
            }
        );
            
        
        btnCall.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                 String[] createJarCommand = {"CMD", "/C", "run.bat " };
                 
                   ProcessBuilder probuilder = new ProcessBuilder(createJarCommand);
        //status.setText("Building the Process");
        statusText.set("Displaying the call graph");
        //You can set up your work directory
        //System.out.println("Present Project Directory : "+ System.getProperty("user.dir"));
        String projectPath=System.getProperty("user.dir");
      probuilder.directory(new File(projectPath+"\\zgrviewer"));
       
        Process process = null;

        try {
           //status.setText("APK to JAR Conversion Started");
           
            process = probuilder.start();
            //status.setText("APK to JAR Conversion Finished");
           
       } catch (IOException ex) {
            Logger.getLogger(MalwareDetectionAndroid.class.getName()).log(Level.SEVERE, null, ex);
       }

        //Read out dir output
        InputStream is = process.getInputStream();
        //   InputStream is2 = process2.getInputStream();
        InputStreamReader isr = new InputStreamReader(is);
        //   InputStreamReader isr2 = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        //    BufferedReader br2 = new BufferedReader(isr2);
        String line;
        System.out.printf("Output of running %s is:\n",
                Arrays.toString(createJarCommand));
        //  System.out.printf("Output of running %s is:\n",
        //          Arrays.toString(createJarCommand));// to be changed
        try {
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(MalwareDetectionAndroid.class.getName()).log(Level.SEVERE, null, ex);
        }
 
                
             }
        }
        );
//                
        btn.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
//                
                final Label labelSelectedFile = new Label();
                 pb.setProgress(0.2);
                 pi.setProgress(0.2);

                labelSelectedFile.setTranslateX(130);
                labelSelectedFile.setTranslateY(200);
                FileChooser fileChooser = new FileChooser();
                FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("APK Files", "*.apk");
                fileChooser.getExtensionFilters().add(extFilter);
                

                file = fileChooser.showOpenDialog(primaryStage.getScene().getWindow());
                if (file == null) {
                    labelSelectedFile.setText("No File selected");
                      pb.setProgress(0);
                      pi.setProgress(0);
                } else {
                    labelSelectedFile.setText(file.getAbsolutePath());
                    root.getChildren().add(labelSelectedFile);
                    
                }
            }
        }
        );
        btnOpenDirectoryChooser.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                final Label labelSelectedDirectory = new Label();
                labelSelectedDirectory.setTranslateX(220);
                labelSelectedDirectory.setTranslateY(250);
                DirectoryChooser directoryChooser = new DirectoryChooser();
                File selectedDirectory = directoryChooser.showDialog(primaryStage);
                  pb.setProgress(0.4);
                 pi.setProgress(0.4);

                if (selectedDirectory == null) {
                    labelSelectedDirectory.setText("No Directory selected");
                      pb.setProgress(0.2);
                      pi.setProgress(0.2);
                } else {
                    labelSelectedDirectory.setText(selectedDirectory.getAbsolutePath());
                    root.getChildren().add(labelSelectedDirectory);
                    outputFilePath = selectedDirectory.getAbsolutePath();
                    //System.out.println(outputFilePath);
                    //convert(file, outputFilePath);
                }
            }
        });
        btnSubmit.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
//                
                if (file == null || outputFilePath == null) {
                    System.out.println("File or Output Path is null!");
                      pb.setProgress(0.2);
                      pi.setProgress(0.2);
                } else {
                      pb.setProgress(0.5);
                      pi.setProgress(0.5);
                    try {
                         try {
                     
                             
                              convert(file, outputFilePath);
                              JavaApplication10.mainCall(file.getName().replace(".apk", "") + "-dex2jar.jar");
                              
                              
                          } catch (FileNotFoundException ex) {
                              Logger.getLogger(MalwareDetectionAndroid.class.getName()).log(Level.SEVERE, null, ex);
                          } catch (IOException ex) {
                              Logger.getLogger(MalwareDetectionAndroid.class.getName()).log(Level.SEVERE, null, ex);
                          }
                    } catch (Exception ex) {
                        Logger.getLogger(MalwareDetectionAndroid.class.getName()).log(Level.SEVERE, null, ex);
                    }
                     pb.setProgress(1);
                     pi.setProgress(1);

                }
            }
        }
        );

    }

    public void convert(File file, String outputfilepath) throws JadxException, FileNotFoundException, IOException {
        
         JadxDecompiler jadx = new JadxDecompiler();
         jadx.loadFile(file);
         jadx.setOutputDir(new File(outputfilepath));
        

        statusText.set("Started");
        
         jadx.save();
        //status.setText("Started");
        String apkPath = file.getAbsolutePath();
        System.out.println(" path " + apkPath);
        String[] createJarCommand = {"CMD", "/C", "d2j-dex2jar.bat " + apkPath};
       
        
        ProcessBuilder probuilder = new ProcessBuilder(createJarCommand);
        //status.setText("Building the Process");
        statusText.set("Building the Process");
        //You can set up your work directory
        //System.out.println("Present Project Directory : "+ System.getProperty("user.dir"));
        String projectPath=System.getProperty("user.dir");
      probuilder.directory(new File(projectPath+"\\dex2jar-2.0\\dex2jar-2.0"));
       
        Process process = null;

        try {
           //status.setText("APK to JAR Conversion Started");
            statusText.set("APK to JAR Conversion Started");
            process = probuilder.start();
            //status.setText("APK to JAR Conversion Finished");
            statusText.set("APK to JAR Conversion Finished");
       } catch (IOException ex) {
            Logger.getLogger(MalwareDetectionAndroid.class.getName()).log(Level.SEVERE, null, ex);
       }

        //Read out dir output
        InputStream is = process.getInputStream();
        //   InputStream is2 = process2.getInputStream();
        InputStreamReader isr = new InputStreamReader(is);
        //   InputStreamReader isr2 = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        //    BufferedReader br2 = new BufferedReader(isr2);
        String line;
        System.out.printf("Output of running %s is:\n",
                Arrays.toString(createJarCommand));
        //  System.out.printf("Output of running %s is:\n",
        //          Arrays.toString(createJarCommand));// to be changed
        try {
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(MalwareDetectionAndroid.class.getName()).log(Level.SEVERE, null, ex);
        }
 
        
        //----------------- code for jar to java -------------------
        //status.setText("JAR to JAVA Conversion Started");
         //pb.setProgress(0.7);
         //  pi.setProgress(0.7);
        statusText.set("JAR to JAVA Conversion Started");
        
        JavaDecompiler javaDecompiler = new JavaDecompiler();

       JDInput jdIn = new ZipFileInput(projectPath+"\\dex2jar-2.0\\dex2jar-2.0\\" + file.getName().replace(".apk", "") + "-dex2jar.jar");

        //JDOutput jdOut = new DirOutput(new File("C:\\Users\\Nitish\\Documents\\NetBeansProjects\\Testing\\Decompiled\\"));
        JDOutput jdOut = new DirOutput(new File(outputFilePath + "\\" + file.getName().replace(".apk", "") + "SourceCode"));


        jdIn.decompile(javaDecompiler, jdOut);
       
        
        //status.setText("JAR to JAVA Conversion Finished.");
      statusText.set("Finished.");
       //----------------------------------------------------------
     //Wait to get exit value
      try {
         int exitValue = process.waitFor();
           // int exitValue2 = process2.waitFor();
            System.out.println("\n\nExit Value is " + exitValue);
            process.destroy();
          //  pb.setProgress(0.8);
           // pi.setProgress(0.8);


        } catch (InterruptedException e) {
           // TODO Auto-generated catch block
            e.printStackTrace();
        }

        //progress.setVisible(false);
    }

    ///////////////////////////////////////////////////////////////////////////////
    //System.out.println(file.getAbsolutePath());
    public static void main(String[] args) {
        launch(args);
    }

}
